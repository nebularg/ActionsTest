name: luacheck
description: Runs luacheck.
branding:
  icon: check-square
  color: yellow
inputs:
  files:
    description: >
      A list of files, rockspecs, or directories to be checked.

      Defaults to the workspace path as set by the `path` input.
    required: false
    default: '.'
  path:
    description: >
      The working directory for luacheck.

      The file list should be relative to this path and output
      filenames be displayed relative to this path.

      Defaults to the workspace path.
    required: false
    default: ${{ github.workspace }}
  args:
    description: >
      Additional command-line arguments.

      See https://luacheck.readthedocs.io/en/stable/cli.html
    required: false
  config:
    description: >
      URL to a custom configuration (`.luacheckrc`) file that will be
      used as the default configuration file.
    required: false
  annotate:
    description: >
      Emit annotations for source code at locations parsed from the output.

      Requires that output of warnings not be suppressed through the -qq or -qqq arguments.

      Defaults to true.
    required: false
    default: 'true'
runs:
  using: composite
  steps:
    - run: |
        echo "##[group]Install luacheck"
        if ! hash luacheck &>/dev/null; then
          sudo apt-get install -yq luarocks 1>/dev/null || exit 1
          sudo luarocks install luacheck 1>/dev/null || exit 1
          sudo luarocks install lanes &>/dev/null || true
        fi
        echo "##[command]luacheck --version"
        luacheck --version
        echo "##[endgroup]"
      shell: bash
    - run: |
        [ -z "${{ inputs.config }}" ] && exit 0
        mkdir -p ~/.config/luacheck
        curl -fsSL "${{ inputs.config }}" -o ~/.config/luacheck/.luacheckrc || {
          echo "Unable to download \"${{ inputs.config }}\"" >&2
          exit 1
        }
      shell: bash
    - run: |
        luacheck ${{ inputs.args }} -- ${{ inputs.files }} | awk -F':' -v enabled="${{ inputs.annotate }}" '
          {
            line = $0 # save the formatted line
            gsub(/\x1B\[[0-9]{1,2}m/,"") # remove formatting
            if (match($0, /^Checking .*[0-9] (warning|error)s?$/, c) != 0)
              level = c[1]
          }
          m = /^\s+.+?:[0-9]+:[0-9]+: / {
            if (enabled == "true" || enabled == "warning" || enabled == "error") {
              gsub(/^\s+|\s+$/, "") # trim whitespace
              printf("::%s file=%s,line=%s,col=%s::%s\n", level, $1, $2, $3, $0)
            } else {
              print line
            }
          }
          !m { print line }
        '
      working-directory: ${{ inputs.path }}
      shell: bash
    - run: echo "::notice title=The-Title::Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse molestie condimentum nulla sed efficitur.\\n\\nSed sagittis, lectus pulvinar lobortis fermentum, elit elit semper mauris, vel molestie orci leo et lacus. Curabitur varius et lorem sed volutpat. Nullam vel risus vel nunc porta lacinia."
      shell: bash
